# this container defines the underlying OS for each job when using the workflow
# with --use-conda --use-singularity
#container: "docker://continuumio/miniconda3"

workdir: "/cluster/projects/mcgahalab/data/mcgahalab/PASS/wgs"

##### load rules #####
include: "rules/common.smk"
include: "rules/align.smk"
# include: "rules/haplogatk.smk"
# include: "rules/mutect2.smk"
# include: "rules/mutect1.smk"
# include: "rules/varscan.smk"
# include: "rules/Strelka.smk"
# include: "rules/SequenzaFromVarscan.smk"
# #include: "rules/Sequenza.smk"
# include: "rules/VCFIntersect.smk"
# include: "rules/vcftoMAFindel.smk"
# include: "rules/vcftoMAFsnv.smk"


##### target rules #####


##### target rules #####
rule all:
  input:
    expand("results/alignment/{sample}/{sample}_sorted.bam", sample = samples["sample"]),
    expand("results/alignment/{sample}/{sample}.aligned.duplicate_marked.sorted.bam", sample = samples["sample"]),
    # expand("results/Haplotype/{sample}/{sample}.raw.snps.indels.vcf", sample = samples["sample"]),
    # expand("results/MuTect1/{sample}/{sample}.mut1.vcf", sample = samples["sample"]),
    # expand("results/MuTect1/{sample}/{sample}.call_stats", sample = samples["sample"]),
    # expand("results/MuTect1/{sample}/{sample}.wig.txt", sample = samples["sample"]),
    # expand("results/MuTect2/{sample}/{sample}_{interval}.mut2.vcf", sample = samples["sample"] , interval=intervals["interval"]),
    # expand("results/MuTect2Merge/{sample}/{sample}_merged_mut2.vcf", sample = samples["sample"]),
    # expand("results/MuTect2Merge/{sample}/{sample}.snvs.recode.vcf", sample = samples["sample"]),
    # expand("results/MuTect2Merge/{sample}/{sample}.indels.recode.vcf", sample = samples["sample"]),
    # expand("results/Strelka/{sample}/{sample}.myAnalysis/results/variants/{sample}_Slk_somatic.indels.vcf.gz", sample = samples["sample"]),
    # expand("results/Sequenza/{sample}_complete", sample = samples["sample"]),
    # expand("results/Varscan/cnv/{sample}/{sample}.vscn.copynumber", sample = samples["sample"]),
    # expand("results/Varscan/snv/{sample}/{sample}.snp", sample = samples["sample"]),
    # expand("results/Varscan/snv/{sample}/{sample}.indel", sample = samples["sample"]),
    # expand("results/Varscan/snv/{sample}/{sample}.snp.Somatic.hc", sample = samples["sample"]),
    # expand("results/Varscan/snv/{sample}/{sample}.indel.Somatic.hc", sample = samples["sample"]),
    # expand("results/Varscan/snv/{sample}/{sample}.snp.Somatic.hc.vcf",sample = samples["sample"]),
    # expand("results/Varscan/snv/{sample}/{sample}.indel.Somatic.hc.vcf",sample = samples["sample"]),
    # expand("results/vcfIntersect/snvs/{sample}/{snv}.vcf", sample = samples["sample"], snv=snv_vcfs["snv"]),
    # expand("results/vcfIntersect/indels/{sample}/{indel}.vcf", sample = samples["sample"], indel=indel_vcfs["indel"]),
    # expand("results/MAF_38_final/indel/{sample}/{indel}.maf", sample = samples["sample"], indel=indel_vcfs["indel"]),
    # expand("results/MAF_38_final/snv/{sample}/{snv}.maf", sample = samples["sample"], snv=snv_vcfs["snv"]),
